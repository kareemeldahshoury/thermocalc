from typing import Dict

# Format: temp(K): [cp, cv, k]
spec_heat_data = {
    "air": {
        250: [1.003, 0.716, 1.401],
        300: [1.005, 0.718, 1.400],
        350: [1.008, 0.721, 1.398],
        400: [1.013, 0.726, 1.395],
        450: [1.020, 0.733, 1.391],
        500: [1.029, 0.742, 1.387],
        550: [1.040, 0.753, 1.381],
        600: [1.051, 0.764, 1.376],
        650: [1.063, 0.776, 1.370],
        700: [1.075, 0.788, 1.364],
        750: [1.087, 0.800, 1.359],
        800: [1.099, 0.812, 1.354],
        900: [1.121, 0.834, 1.344],
        1000: [1.142, 0.855, 1.336],
    },
    "co2": {
        250: [0.791, 0.602, 1.314],
        300: [0.846, 0.657, 1.288],
        350: [0.895, 0.706, 1.268],
        400: [0.939, 0.750, 1.252],
        450: [0.978, 0.789, 1.240],
        500: [1.014, 0.825, 1.229],
        550: [1.047, 0.858, 1.220],
        600: [1.075, 0.886, 1.213],
        650: [1.101, 0.912, 1.208],
        700: [1.125, 0.936, 1.202],
        750: [1.148, 0.959, 1.197],
        800: [1.169, 0.980, 1.193],
        900: [1.210, 1.020, 1.186],
        1000: [1.234, 1.045, 1.181],
    },
    "co": {
        250: [1.039, 0.743, 1.400],
        300: [1.040, 0.744, 1.399],
        350: [1.043, 0.746, 1.398],
        400: [1.047, 0.751, 1.395],
        450: [1.053, 0.757, 1.391],
        500: [1.063, 0.767, 1.387],
        550: [1.074, 0.777, 1.382],
        600: [1.087, 0.790, 1.376],
        650: [1.100, 0.803, 1.370],
        700: [1.113, 0.816, 1.364],
        750: [1.126, 0.829, 1.358],
        800: [1.139, 0.842, 1.353],
        900: [1.163, 0.866, 1.343],
        1000: [1.185, 0.888, 1.335],
    },
    "h2": {
        250: [14.051, 9.927, 1.416],
        300: [14.307, 10.183, 1.405],
        350: [14.427, 10.302, 1.400],
        400: [14.476, 10.352, 1.398],
        450: [14.501, 10.377, 1.398],
        500: [14.513, 10.389, 1.397],
        550: [14.530, 10.405, 1.396],
        600: [14.546, 10.422, 1.395],
        650: [14.571, 10.447, 1.395],
        700: [14.604, 10.480, 1.394],
        750: [14.645, 10.521, 1.392],
        800: [14.695, 10.570, 1.390],
        900: [14.822, 10.698, 1.385],
        1000: [14.983, 10.859, 1.380],
    },
    "n2": {
        250: [1.039, 0.742, 1.400],
        300: [1.039, 0.743, 1.400],
        350: [1.041, 0.744, 1.399],
        400: [1.044, 0.747, 1.397],
        450: [1.049, 0.752, 1.395],
        500: [1.056, 0.759, 1.391],
        550: [1.065, 0.768, 1.387],
        600: [1.075, 0.778, 1.382],
        650: [1.086, 0.789, 1.376],
        700: [1.098, 0.801, 1.371],
        750: [1.110, 0.813, 1.365],
        800: [1.121, 0.825, 1.360],
        900: [1.145, 0.849, 1.349],
        1000: [1.167, 0.870, 1.341],
    },
    "o2": {
        250: [0.913, 0.653, 1.398],
        300: [0.918, 0.658, 1.395],
        350: [0.928, 0.668, 1.389],
        400: [0.941, 0.681, 1.382],
        450: [0.956, 0.696, 1.373],
        500: [0.972, 0.712, 1.365],
        550: [0.988, 0.728, 1.358],
        600: [1.005, 0.745, 1.350],
        650: [1.017, 0.758, 1.343],
        700: [1.031, 0.771, 1.337],
        750: [1.043, 0.783, 1.332],
        800: [1.054, 0.794, 1.327],
        900: [1.074, 0.814, 1.319],
        1000: [1.090, 0.830, 1.313],
    }
}


def interpolate(val1, val2, x1, x2, x):
    return val1 + (val2 - val1) * (x - x1) / (x2 - x1)

class SpecHeat:
    def __init__(self, substance: str, inputs: Dict[str, str]):
        self.substance = substance
        self.T = float(inputs.get("temperature", 0))
        self.data = spec_heat_data.get(substance)
        if not self.data:
            raise ValueError(f"Substance '{substance}' not found in specific heat table.")

        self.temps = sorted(self.data.keys())
        if not (self.temps[0] <= self.T <= self.temps[-1]):
            raise ValueError(f"Temperature {self.T} K out of range for {substance}.")

    def calculate(self) -> Dict[str, float]:
        if self.T in self.data:
            cp, cv, k = self.data[self.T]
        else:
            for i in range(len(self.temps) - 1):
                T1, T2 = self.temps[i], self.temps[i + 1]
                if T1 <= self.T <= T2:
                    break
            v1 = self.data[T1]
            v2 = self.data[T2]
            cp = interpolate(v1[0], v2[0], T1, T2, self.T)
            cv = interpolate(v1[1], v2[1], T1, T2, self.T)
            k = interpolate(v1[2], v2[2], T1, T2, self.T)

        return {
            "Temperature (K)": round(self.T, 2),
            "cₚ (kJ/kg·K)": round(cp, 4),
            "cᵥ (kJ/kg·K)": round(cv, 4),
            "k (cₚ/cᵥ) ": round(k, 4)
        }

def specHeatCalculation(substance: str, inputs: Dict[str, str]):
    return SpecHeat(substance, inputs).calculate()
