from typing import Dict

# Saturated ice–water vapor data at subzero temperatures
# Format: T (°C): [P_sat (kPa), v_i, v_g, u_i, u_ig, u_g, h_i, h_ig, h_g, s_i, s_ig, s_g]
T_sat_ice_data = {
    0.01: [0.61169, 0.001091, 205.99, -333.40, 2707.9, 2374.5, -333.40, 2833.9, 2500.5, -1.2202, 10.374, 9.154],
    0.00: [0.61115, 0.001091, 206.17, -333.43, 2707.9, 2374.5, -333.43, 2833.9, 2500.5, -1.2204, 10.375, 9.154],
    -2:   [0.51772, 0.001091, 241.62, -337.63, 2709.4, 2371.8, -337.63, 2834.5, 2496.8, -1.2358, 10.453, 9.218],
    -4:   [0.43748, 0.001090, 283.84, -341.80, 2710.8, 2369.0, -341.80, 2835.0, 2493.2, -1.2513, 10.533, 9.282],
    -6:   [0.36873, 0.001090, 334.27, -345.94, 2712.2, 2366.2, -345.94, 2835.4, 2489.5, -1.2667, 10.613, 9.347],
    -8:   [0.30998, 0.001090, 394.66, -350.04, 2713.5, 2363.5, -350.04, 2835.8, 2485.8, -1.2821, 10.695, 9.413],
    -10:  [0.25990, 0.001089, 467.17, -354.12, 2714.8, 2360.7, -354.12, 2836.2, 2482.1, -1.2976, 10.778, 9.480],
    -12:  [0.21732, 0.001089, 554.47, -358.17, 2716.1, 2357.9, -358.17, 2836.6, 2478.4, -1.3130, 10.862, 9.549],
    -14:  [0.18121, 0.001088, 659.88, -362.18, 2717.3, 2355.2, -362.18, 2836.9, 2474.7, -1.3284, 10.947, 9.618],
    -16:  [0.15068, 0.001088, 787.51, -366.17, 2718.6, 2352.4, -366.17, 2837.2, 2471.0, -1.3439, 11.033, 9.689],
    -18:  [0.12492, 0.001088, 942.51, -370.13, 2719.7, 2349.6, -370.13, 2837.5, 2467.3, -1.3593, 11.121, 9.761],
    -20:  [0.10326, 0.001087, 1131.3, -374.06, 2720.9, 2346.8, -374.06, 2837.7, 2463.6, -1.3748, 11.209, 9.835],
    -22:  [0.08510, 0.001087, 1362.0, -377.95, 2722.0, 2344.1, -377.95, 2837.9, 2459.9, -1.3903, 11.300, 9.909],
    -24:  [0.06991, 0.001087, 1644.7, -381.82, 2723.1, 2341.3, -381.82, 2838.1, 2456.2, -1.4057, 11.391, 9.985],
    -26:  [0.05725, 0.001087, 1992.2, -385.66, 2724.2, 2338.5, -385.66, 2838.2, 2452.5, -1.4212, 11.484, 10.063],
    -28:  [0.04673, 0.001086, 2421.0, -389.47, 2725.2, 2335.7, -389.47, 2838.3, 2448.8, -1.4367, 11.578, 10.141],
    -30:  [0.03802, 0.001086, 2951.7, -393.25, 2726.2, 2332.9, -393.25, 2838.4, 2445.1, -1.4521, 11.673, 10.221],
    -32:  [0.03082, 0.001086, 3610.9, -397.00, 2727.2, 2330.2, -397.00, 2838.4, 2441.4, -1.4676, 11.770, 10.303],
    -34:  [0.02490, 0.001085, 4432.4, -400.72, 2728.1, 2327.4, -400.72, 2838.4, 2437.7, -1.4831, 11.868, 10.386],
    -36:  [0.02016, 0.001085, 5469.0, -404.40, 2729.0, 2324.6, -404.40, 2838.4, 2434.0, -1.4986, 11.969, 10.471],
    -38:  [0.01608, 0.001085, 6750.5, -408.07, 2729.9, 2321.8, -408.07, 2838.3, 2430.3, -1.5141, 12.071, 10.557],
    -40:  [0.01285, 0.001084, 8376.7, -411.70, 2730.7, 2319.0, -411.70, 2838.3, 2426.6, -1.5296, 12.174, 10.644],
}

def interpolate(val1, val2, x1, x2, x):
    return val1 + (val2 - val1) * (x - x1) / (x2 - x1)

class SatIceWaterCalculation:
    def __init__(self, inputs: Dict[str, str]):
        self.inputs = inputs
        self.temp = float(inputs.get("temperature", 0))  # °C
        self.x_value = float(inputs.get("quality", 0))   # between 0 and 1
        self.temps = sorted(T_sat_ice_data.keys())

    def calculate(self) -> Dict[str, float]:
        if not (self.temps[0] <= self.temp <= self.temps[-1]):
            raise ValueError(f"Temperature {self.temp} °C is out of range.")
        if not (0 <= self.x_value <= 1):
            raise ValueError(f"Quality {self.x_value} must be between 0 and 1.")

        if self.temp in T_sat_ice_data:
            props = T_sat_ice_data[self.temp]
        else:
            for i in range(len(self.temps) - 1):
                T1, T2 = self.temps[i], self.temps[i + 1]
                if T1 <= self.temp <= T2:
                    break
            props1 = T_sat_ice_data[T1]
            props2 = T_sat_ice_data[T2]
            props = [interpolate(props1[j], props2[j], T1, T2, self.temp) for j in range(13)]

        P_sat, v_i, v_g, u_i, u_ig, u_g, h_i, h_ig, h_g, s_i, s_ig, s_g = props

        v = v_i + self.x_value * (v_g - v_i)
        u = u_i + self.x_value * u_ig
        h = h_i + self.x_value * h_ig
        s = s_i + self.x_value * s_ig

        return {
            "saturation_temperature (°C)": self.temp,
            "pressure (kPa)": round(P_sat, 5),
            "quality": self.x_value,
            "specific_volume (m³/kg)": round(v, 6),
            "internal_energy (kJ/kg)": round(u, 2),
            "enthalpy (kJ/kg)": round(h, 2),
            "entropy (kJ/kg·K)": round(s, 5),
        }
