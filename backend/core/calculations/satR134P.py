from typing import Dict


P_sat134a_data = {
    .60: [-36.95, 0.0007098, 0.31121, 3.798, 205.32, 209.12, 3.841, 223.95, 227.79, 0.01634, 0.94807, 0.96441],
    .70: [-33.87, 0.0007144, 0.26929, 7.680, 203.20, 210.88, 7.730, 222.00, 229.73, 0.03267, 0.92775, 0.96042],
    .80: [-31.13, 0.0007185, 0.23753, 11.15, 201.30, 212.46, 11.21, 220.25, 231.46, 0.04711, 0.90999, 0.95710],
    .90: [-28.65, 0.0007223, 0.21263, 14.31, 199.57, 213.88, 14.37, 218.65, 233.02, 0.06008, 0.89419, 0.95427],
    1.00: [-26.37, 0.0007259, 0.19254, 17.21, 197.98, 215.19, 17.28, 217.16, 234.44, 0.07188, 0.87995, 0.95183],
    1.20: [-22.32, 0.0007324, 0.16212, 22.40, 195.11, 217.51, 22.49, 214.48, 236.97, 0.09275, 0.85503, 0.94779],
    1.40: [-18.77, 0.0007383, 0.14014, 26.98, 192.57, 219.54, 27.08, 212.08, 239.16, 0.11087, 0.83368, 0.94456],
    1.60: [-15.60, 0.0007437, 0.12348, 31.09, 190.27, 221.35, 31.21, 209.90, 241.11, 0.12693, 0.81496, 0.94190],
    1.80: [-12.73, 0.0007487, 0.11041, 34.83, 188.16, 222.99, 34.97, 207.90, 242.86, 0.14139, 0.79826, 0.93965],
    2.00: [-10.09, 0.0007533, 0.099867, 38.28, 186.21, 224.48, 38.43, 206.03, 244.46, 0.15457, 0.78316, 0.93773],
    2.40: [-5.38, 0.0007620, 0.083897, 44.48, 182.67, 227.14, 44.66, 202.62, 247.28, 0.17794, 0.75664, 0.93458],
    2.80: [-1.25, 0.0007699, 0.072352, 49.97, 179.50, 229.46, 50.18, 199.54, 249.72, 0.19829, 0.73381, 0.93210],
    3.20: [2.46, 0.0007772, 0.063604, 54.92, 176.61, 231.52, 55.16, 196.71, 251.88, 0.21637, 0.71369, 0.93006],
    3.60: [5.82, 0.0007841, 0.056738, 59.44, 173.94, 233.38, 59.72, 194.08, 253.81, 0.23270, 0.69566, 0.92836],
    4.00: [8.91, 0.0007907, 0.051201, 63.62, 171.45, 235.07, 63.94, 191.62, 255.55, 0.24761, 0.67929, 0.92691],
    4.50: [12.46, 0.0007985, 0.045619, 68.45, 168.54, 237.00, 68.81, 188.71, 257.53, 0.26465, 0.66069, 0.92535],
    5.00: [15.71, 0.0008059, 0.041118, 72.93, 165.82, 238.75, 73.33, 185.98, 259.30, 0.28023, 0.64377, 0.92400],
    5.50: [18.73, 0.0008130, 0.037408, 77.10, 163.25, 240.35, 77.54, 183.38, 260.92, 0.29461, 0.62821, 0.92282],
    6.00: [21.55, 0.0008199, 0.034295, 81.02, 160.81, 241.83, 81.51, 180.90, 262.40, 0.30799, 0.61378, 0.92177],
    6.50: [24.20, 0.0008266, 0.031646, 84.72, 158.48, 243.20, 85.26, 178.51, 263.77, 0.32051, 0.60030, 0.92081],
    7.00: [26.69, 0.0008331, 0.029361, 88.24, 156.24, 244.48, 88.82, 176.21, 265.03, 0.33230, 0.58763, 0.91994],
    7.50: [29.06, 0.0008395, 0.027371, 91.59, 154.08, 245.67, 92.22, 173.98, 266.20, 0.34345, 0.57567, 0.91912],
    8.00: [31.31, 0.0008458, 0.025621, 94.79, 152.00, 246.79, 95.47, 171.82, 267.29, 0.35404, 0.56431, 0.91835],
    8.50: [33.45, 0.0008520, 0.024069, 97.87, 149.98, 247.85, 98.60, 169.71, 268.31, 0.36413, 0.55349, 0.91762],
    9.00: [35.51, 0.0008580, 0.022683, 100.83, 148.01, 248.85, 101.61, 167.66, 269.26, 0.37377, 0.54315, 0.91692],
    9.50: [37.48, 0.0008641, 0.021438, 103.69, 146.10, 249.79, 104.51, 165.64, 270.15, 0.38301, 0.53323, 0.91624],
    10.00: [39.37, 0.0008700, 0.020313, 106.45, 144.23, 250.68, 107.32, 163.67, 270.99, 0.39189, 0.52368, 0.91558],
    12.00: [46.29, 0.0008934, 0.016715, 116.70, 137.11, 253.81, 117.77, 156.10, 273.87, 0.42441, 0.48863, 0.91303],
    14.00: [52.40, 0.0009166, 0.014107, 125.94, 130.43, 256.37, 127.22, 148.90, 276.12, 0.45315, 0.45734, 0.91050],
    16.00: [57.88, 0.0009400, 0.012123, 134.43, 124.04, 258.47, 135.93, 141.93, 277.86, 0.47911, 0.42873, 0.90784],
    18.00: [62.87, 0.0009639, 0.010559, 142.33, 117.83, 260.17, 144.07, 135.11, 279.17, 0.50294, 0.40204, 0.90498],
    20.00: [67.45, 0.0009886, 0.009288, 149.78, 111.73, 261.51, 151.76, 128.33, 280.09, 0.52509, 0.37675, 0.90184],
    25.00: [77.54, 0.0010566, 0.006936, 166.99, 96.47, 263.45, 169.63, 111.16, 280.79, 0.57531, 0.31695, 0.89226],
    30.00: [86.16, 0.0011406, 0.005275, 183.04, 80.22, 263.26, 186.46, 92.63, 279.09, 0.62118, 0.25776, 0.87894],
}

def interpolate(val1, val2, x1, x2, x):
    return val1 + (val2 - val1) * (x - x1) / (x2 - x1)

class Sat134aPCalculation:
    def __init__(self, inputs: Dict[str, str]):
        self.inputs = inputs
        self.pressure = float(inputs.get("pressure", 0))  # kPa
        self.x_value = float(inputs.get("quality", 0))    # between 0 and 1
        self.pressures = sorted(P_sat134a_data.keys())

    def calculate(self) -> Dict[str, float]:
        if not (self.pressures[0] <= self.pressure <= self.pressures[-1]):
            raise ValueError(f"Pressure {self.pressure} kPa is out of range.")
        if not (0 <= self.x_value <= 1):
            raise ValueError(f"Quality {self.x_value} must be between 0 and 1.")

        if self.pressure in P_sat134a_data:
            props = P_sat134a_data[self.pressure]
        else:
            for i in range(len(self.pressures) - 1):
                P1, P2 = self.pressures[i], self.pressures[i + 1]
                if P1 <= self.pressure <= P2:
                    break
            props1 = P_sat134a_data[P1]
            props2 = P_sat134a_data[P2]
            props = [interpolate(props1[j], props2[j], P1, P2, self.pressure) for j in range(12)]

        T_sat, v_f, v_g, u_f, u_fg, u_g, h_f, h_fg, h_g, s_f, s_fg, s_g = props

        v = v_f + self.x_value * (v_g - v_f)
        u = u_f + self.x_value * u_fg
        h = h_f + self.x_value * h_fg
        s = s_f + self.x_value * s_fg

        return {
            "saturation_pressure (kPa)": self.pressure,
            "temperature (°C)": round(T_sat, 2),
            "quality": self.x_value,
            "specific_volume (m³/kg)": round(v, 6),
            "internal_energy (kJ/kg)": round(u, 2),
            "enthalpy (kJ/kg)": round(h, 2),
            "entropy (kJ/kg·K)": round(s, 5),
        }
